i<-1
while (i<=10) {
i<-i+4
}
print(i)
i<-1
while (TRUE) {
i<-i+4
if (i>10) break
}
print(i)
i<-1
repeat {
i<-i+4
if (i>10) break
}
print(i)
sim <- function(nreps) {
commdata <- list() # will store all our info about the 3 committees
commdata$countabsamecomm <- 0
for (rep in 1:nreps) {
commdata$whosleft <- 1:20 # who's left to choose from
commdata$numabchosen <- 0 # number among A, B chosen so far
# choose committee 1, and check for A,B serving together
commdata <- choosecomm(commdata,5)
# if A or B already chosen, no need to look at the other comms.
if (commdata$numabchosen > 0) next
# choose committee 2 and check
commdata <- choosecomm(commdata,4)
if (commdata$numabchosen > 0) next
# choose committee 3 and check
commdata <- choosecomm(commdata,3)
}
print(commdata$countabsamecomm/nreps)
}
choosecomm <- function(comdat,comsize) {
# choose committee
committee <- sample(comdat$whosleft,comsize)
# count how many of A and B were chosen
comdat$numabchosen <- length(intersect(1:2,committee))
if (comdat$numabchosen == 2)
comdat$countabsamecomm <- comdat$countabsamecomm + 1
# delete chosen committee from the set of people we now have to choose from
comdat$whosleft <- setdiff(comdat$whosleft,committee)
return(comdat)
}
sim(100)
sim(1000)
sim(10000)
sim(100000)
sim(100000)
sim(100000)
sim <- function(nreps) {
commdata <- list() # will store all our info about the 3 committees
commdata$countabsamecomm <- 0
for (rep in 1:nreps) {
commdata$whosleft <- 1:20 # who's left to choose from
commdata$numabchosen <- 0 # number among A, B chosen so far
# choose committee 1, and check for A,B serving together
commdata <- choosecomm(commdata,5)
# if A or B already chosen, no need to look at the other comms.
if (commdata$numabchosen > 0) next
# choose committee 2 and check
commdata <- choosecomm(commdata,4)
if (commdata$numabchosen > 0) next
# choose committee 3 and check
commdata <- choosecomm(commdata,3)
}
print(commdata$countabsamecomm/nreps)
print(commdata)
}
sim(100000)
my_sim<-function(nrep){
mySimList<-list()
mySimList$sameCount<-0
for (i in nrep){
mySimList$left<-1:20
selected<-sample(mySimList$left,size = 5)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
mySimList$left<-setdiff(mySimList$left,selected)
next
}
selected<-sample(mySimList$left,size = 4)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
mySimList$left<-setdiff(mySimList$left,selected)
next
}
selected<-sample(mySimList$left,size = 3)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
mySimList$left<-setdiff(mySimList$left,selected)
next
}
}
return(mySimList$sameCount/nrep)
}
my_sim(100)
my_sim(1000)
my_sim(10000)
sample(m1:20,size = 5)
sample(1:20,size = 5)
intersect(1:2,c(16,4,19,1,17))
setdiff(1:20,c(16,4,19,1,17))
my_sim<-function(nrep){
mySimList<-list()
mySimList$sameCount<-0
for (i in nrep){
mySimList$left<-1:20
selected<-sample(mySimList$left,size = 5)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
next
}
mySimList$left<-setdiff(mySimList$left,selected)
selected<-sample(mySimList$left,size = 4)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
next
}
mySimList$left<-setdiff(mySimList$left,selected)
selected<-sample(mySimList$left,size = 3)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
next
}
}
return(mySimList$sameCount/nrep)
}
my_sim(10000)
my_sim(10000)
my_sim(10000)
my_sim<-function(nrep){
mySimList<-list()
mySimList$sameCount<-0
for (i in 1:nrep){
mySimList$left<-1:20
selected<-sample(mySimList$left,size = 5)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
next
}
mySimList$left<-setdiff(mySimList$left,selected)
selected<-sample(mySimList$left,size = 4)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
next
}
mySimList$left<-setdiff(mySimList$left,selected)
selected<-sample(mySimList$left,size = 3)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
next
}
}
return(mySimList$sameCount/nrep)
}
my_sim(10000)
my_sim(10000)
my_sim(10000)
my_sim(10000)
my_sim(10000)
my_sim<-function(nrep){
mySimList<-list()
mySimList$sameCount<-0
for (i in nrep){
mySimList$left<-1:20
mySimList$flag<-0
mySimList<-chsCom(mySimList,5)
if(mySimList$flag>0) next
mySimList<-chsCom(mySimList,4)
if(mySimList$flag>0) next
mySimList<-chsCom(mySimList,3)
}
return(mySimList$sameCount/nrep)
}
chsCom<-function(mySimList,num){
selected<-sample(mySimList$left,size = num)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
mySimList$left<-setdiff(mySimList$left,selected)
mySimList$flag<-1
}
return(mySimList)
}
my_sim(100)
my_sim(1000)
my_sim(1000)
my_sim<-function(nrep){
mySimList<-list()
mySimList$sameCount<-0
for (i in 1:nrep){
mySimList$left<-1:20
mySimList$flag<-0
mySimList<-chsCom(mySimList,5)
if(mySimList$flag>0) next
mySimList<-chsCom(mySimList,4)
if(mySimList$flag>0) next
mySimList<-chsCom(mySimList,3)
}
return(mySimList$sameCount/nrep)
}
chsCom<-function(mySimList,num){
selected<-sample(mySimList$left,size = num)
if(length(intersect(x = 1:2, y = selected)) > 0){
mySimList$sameCount<-mySimList$sameCount+1
mySimList$left<-setdiff(mySimList$left,selected)
mySimList$flag<-1
}
return(mySimList)
}
my_sim(1000)
my_sim(1000)
my_sim(1000)
my_sim(1000)
my_sim(1000)
my_sim(1000)
my_sim(1000)
my_sim(1000)
my_list<-list(a=c(1,2,3),b=c("f","g"))
my_list
my_list$a
my_list[["a"]]
?apply
?array
my_df<-data.frame(a=1:3,b=c("a","b","c"))
my_df<-data.frame(a=1:3,b=4:6
)
my_df
apply(my_df,mean)
apply(my_df,1,mean)
apply(my_df,2,mean)
apply(my_df,2,*)
apply(my_df,2,"*")
apply(my_df,1,"*")
apply(my_df,1,*)
apply(my_df,1,summary)
apply(my_df,2,summary)
apply(my_df,1,summary)
my_df
as.list(my_df)
as.list(my_df)
my_m<-matrix(1:6,2,3)
my_m
as.list(my_m)
