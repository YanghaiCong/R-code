if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(remain),4)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-1000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(remain),4)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(remain),4)]
if(length(intersect(1:2,chosen))==2) total=total+1; next
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
# next
sim <- function(nreps) {
commdata <- list()
commdata$countabsamecomm <- 0
for (rep in 1:nreps) {
commdata$whosleft <- 1:20
commdata$numabchosen <- 0
commdata <- choosecomm(commdata,5)
if (commdata$numabchosen > 0) next
commdata <- choosecomm(commdata,4)
if (commdata$numabchosen > 0) next
commdata <- choosecomm(commdata,3)
}
print(commdata$countabsamecomm/nreps)
print(commdata)
}
choosecomm <- function(comdat,comsize) {
committee <- sample(comdat$whosleft,comsize)
comdat$numabchosen <- length(intersect(1:2,committee))
if (comdat$numabchosen == 2)
comdat$countabsamecomm <- comdat$countabsamecomm + 1
comdat$whosleft <- setdiff(comdat$whosleft,committee)
return(comdat)
}
sim(10000)
sim(10000)
sim(10000)
if(TRUE) print("a"); print("b")
if(FALSE) print("a"); print("b")
if(TRUE) print("a") print("b")
if(TRUE) print("a"), print("b")
?next
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total=total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total=total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(remain),4)]
if(length(intersect(1:2,chosen))==2) {total=total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(remain),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(remain),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
chosen<-candidates[sample(length(candidates),5)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),4)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
chosen<-candidates[sample(length(candidates),3)]
if(length(intersect(1:2,chosen))==2) {total<-total+1; next}
if(length(intersect(1:2,chosen))==1) next
candidates<-setdiff(x = candidates, y = chosen)
}
total
my_function<-function(candidates,total,numberOfCommitteeMembers){
chosen<-candidates[sample(length(candidates),numberOfCommitteeMembers)]
candidates<-setdiff(x = candidates, y = chosen)
if(length(intersect(1:2,chosen))==2) {
total<-total+1
return(TRUE)
}else if(length(intersect(1:2,chosen))==2) {
return(TRUE)
}else{
return(FALSE)
}
}
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
if (my_function(candidates,total,5)) next
if (my_function(candidates,total,4)) next
if (my_function(candidates,total,3))
}
my_function(candidates,total,5)
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
if (my_function(candidates,total,5)) next
if (my_function(candidates,total,4)) next
if (my_function(candidates,total,3)) next
}
my_function<-function(candidates,total,numberOfCommitteeMembers){
chosen<-candidates[sample(length(candidates),numberOfCommitteeMembers)]
candidates<-setdiff(x = candidates, y = chosen)
if(length(intersect(1:2,chosen))==2) {
total<-total+1
print(total)
return(TRUE)
}else if(length(intersect(1:2,chosen))==2) {
return(TRUE)
}else{
return(FALSE)
}
}
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
if (my_function(candidates,total,5)) next
if (my_function(candidates,total,4)) next
if (my_function(candidates,total,3)) next
}
my_function<-function(candidates,numberOfCommitteeMembers){
chosen<-candidates[sample(length(candidates),numberOfCommitteeMembers)]
candidates<-setdiff(x = candidates, y = chosen)
if(length(intersect(1:2,chosen))==2) {
total<-total+1
print(total)
return(TRUE)
}else if(length(intersect(1:2,chosen))==2) {
return(TRUE)
}else{
return(FALSE)
}
}
numberOfRounds<-10000
total<-0
for(i in 1:numberOfRounds){
candidates<-1:20
if (my_function(candidates,5)) next
if (my_function(candidates,4)) next
if (my_function(candidates,3)) next
}
sim<-function(nreps){
committeeData<-list()
committeeData$countABSameCommittee<-0
for(i in 1:nreps){
committeeData$whoIsLeft<-1:20
committeeData$numberOfAB<-0
committeeData<-formCommittee(committeeData,5)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,4)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,3)
}
print(committeeData$countABSameCommittee/nreps)
}
formCommittee<-function(committeeData,numberOfCommitteeMembersToChoose){
chosen<-sample(committeeData$WhoIsLeft,numberOfCommitteeMembersToChoose)
committeeData$numberOfAB<-length(intersect(1:2,chosen))
if(committeeData$numberOfAB==2)
committeeData$countABSameCommittee<-committeeData$countABSameCommittee+1
committeeData$whoIsLeft<-setdiff(committeeData$whoIsLeft,chosen)
return(committeeData)
}
sim(1000)
sim<-function(nreps){
committeeData<-list()
committeeData$countABSameCommittee<-0
for(i in 1:nreps){
committeeData$whoIsLeft<-1:20
committeeData$numberOfAB<-0
committeeData<-formCommittee(committeeData,5)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,4)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,3)
}
print(committeeData$countABSameCommittee/nreps)
}
formCommittee<-function(committeeData,numberOfCommitteeMembersToChoose){
chosen<-sample(committeeData$WhoIsLeft,numberOfCommitteeMembersToChoose)
committeeData$numberOfAB<-length(intersect(1:2,chosen))
if(committeeData$numberOfAB==2)
committeeData$countABSameCommittee<-committeeData$countABSameCommittee+1
committeeData$whoIsLeft<-setdiff(committeeData$whoIsLeft,chosen)
return(committeeData)
}
sim<-function(nreps){
committeeData<-list()
committeeData$countABSameCommittee<-0
for(i in 1:nreps){
committeeData$whoIsLeft<-1:20
committeeData$numberOfAB<-0
committeeData<-formCommittee(committeeData,5)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,4)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,3)
}
print(committeeData$countABSameCommittee/nreps)
}
formCommittee<-function(committeeData,numberOfCommitteeMembersToChoose){
chosen<-sample(committeeData$WhoIsLeft,numberOfCommitteeMembersToChoose)
committeeData$numberOfAB<-length(intersect(1:2,chosen))
if(committeeData$numberOfAB==2)
committeeData$countABSameCommittee<-committeeData$countABSameCommittee+1
committeeData$whoIsLeft<-setdiff(committeeData$whoIsLeft,chosen)
return(committeeData)
}
sim(1000)
sim <- function(nreps) {
commdata <- list()
commdata$countabsamecomm <- 0
for (rep in 1:nreps) {
commdata$whosleft <- 1:20
commdata$numabchosen <- 0
commdata <- choosecomm(commdata,5)
if (commdata$numabchosen > 0) next
commdata <- choosecomm(commdata,4)
if (commdata$numabchosen > 0) next
commdata <- choosecomm(commdata,3)
}
print(commdata$countabsamecomm/nreps)
}
choosecomm <- function(comdat,comsize) {
committee <- sample(comdat$whosleft,comsize)
comdat$numabchosen <- length(intersect(1:2,committee))
if (comdat$numabchosen == 2)
comdat$countabsamecomm <- comdat$countabsamecomm + 1
comdat$whosleft <- setdiff(comdat$whosleft,committee)
return(comdat)
}
sim(1000)
sim<-function(nreps){
committeeData<-list()
committeeData$countABSameCommittee<-0
for(i in 1:nreps){
committeeData$whoIsLeft<-1:20
committeeData$numberOfAB<-0
committeeData<-formCommittee(committeeData,5)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,4)
if(committeeData$numberOfAB>0) next
committeeData<-formCommittee(committeeData,3)
}
print(committeeData$countABSameCommittee/nreps)
}
formCommittee<-function(committeeData,numberOfCommitteeMembersToChoose){
chosen<-sample(committeeData$whoIsLeft,numberOfCommitteeMembersToChoose)
committeeData$numberOfAB<-length(intersect(1:2,chosen))
if(committeeData$numberOfAB==2)
committeeData$countABSameCommittee<-committeeData$countABSameCommittee+1
committeeData$whoIsLeft<-setdiff(committeeData$whoIsLeft,chosen)
return(committeeData)
}
sim(1000)
